- hosts: all
  # use privilege (default : root)
  become: yes
  vars_files:
  - env_variables
  # method to use privilege
  become_method: sudo
  tasks:
  # task settings
  - name: Disabling Swap on all nodes
    shell: swapoff -a

  # - name: disable SELinux
  #   command: setenforce 0

  - name: disable SELinux on reboot
    selinux:
      state: disabled

  - name: Creating a repository file for Kubernetes
    file:
     path: /etc/yum.repos.d/kubernetes.repo
     state: touch

  - name: Adding repository details in Kubernetes repo file.
    blockinfile:
     path: /etc/yum.repos.d/kubernetes.repo
     block: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

  - name: Installing Docker
    shell: |
     yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
     yum install docker-ce -y --nobest
     sudo systemctl enable docker
     sudo systemctl start docker

  - name: Installing required packages
    yum:
     name: "{{ packages }}"
     state: present

  - name: Starting and Enabling the required services
    service:
     name: "{{ item }}"
     state: started
     enabled: yes
    with_items: "{{ services }}"



  - name: Allow masquerading in Firewalld
    ansible.posix.firewalld:
      masquerade: "yes"
      state: enabled
      permanent: yes
      immediate: yes

  - name: Enabling Bridge Firewall Rule
    shell: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"

- hosts: masters
  become: yes
  vars_files:
  - env_variables
  tasks:
  - name: Allow Network Ports in Firewalld
    ansible.posix.firewalld:
     port: "{{ item }}"
     state: enabled
     permanent: yes
     immediate: yes
    with_items: "{{ master_ports }}"

  - name: Reconfig containerd
    shell: |
      rm -rf /etc/containerd/config.toml
      systemctl restart containerd

  - name: initialize the cluster
    shell: kubeadm init --apiserver-advertise-address=192.168.10.161 --pod-network-cidr=192.168.0.0/16 >> cluster_initialized.txt
    register: output   

  - debug: msg="{{ output }}"

  - name: Storing Logs and Generated token for future purpose.
    local_action: copy content={{ output.stdout }} dest={{ token_file }}

  - name: Copying required files
    shell: |
     mkdir -p $HOME/.kube
     sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
     sudo chown $(id -u):$(id -g) $HOME/.kube/config

  - name: Install Network Add-on
    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

- hosts: workers
  become: yes
  vars_files:
  - env_variables
  tasks:

  - name: Reconfig containerd
    shell: |
      rm -rf /etc/containerd/config.toml
      systemctl restart containerd

  - name: Allow Network Ports in Firewalld
    ansible.posix.firewalld:
     port: "{{ item }}"
     state: enabled
     permanent: yes
     immediate: yes
    with_items: "{{ worker_ports }}"

  # - name: Copying token to worker nodes
  #   copy: src={{ token_file }} dest=join_token


  # - name: Joining worker nodes with kubernetes master
  #   shell: "kubeadm join 192.168.10.161:6443 --token zd315g.jhkob4cbhvdosz18 --discovery-token-ca-cert-hash sha256:30e3489a3bb8733db5602319cae29ad9674ef7c67eccaa52130a62e14d13445d"

  # - name: httpd is installed
  #   yum:
  #     name: httpd
  #     state: present

  # - name: httpd is running and enabled
  #   service:
  #     name: httpd
  #     state: started
  #     enabled: yes

  # - name: firewalld rules
  #   ansible.posix.firewalld:
  #     service: "{{ item }}"
  #     state: enabled
  #     permanent: true
  #     immediate: true
  #   with_items:
  #     - http
  #     - https